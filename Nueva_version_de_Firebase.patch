Index: app/src/main/java/edu/galileo/android/androidchat/login/LoginRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/edu/galileo/android/androidchat/login/LoginRepositoryImpl.java	(revision 6d05887547bb2e793e5bc7b6e386f71a1f617ac0)
+++ app/src/main/java/edu/galileo/android/androidchat/login/LoginRepositoryImpl.java	(revision )
@@ -1,11 +1,17 @@
 package edu.galileo.android.androidchat.login;
 
-import com.firebase.client.AuthData;
-import com.firebase.client.DataSnapshot;
-import com.firebase.client.Firebase;
-import com.firebase.client.FirebaseError;
-import com.firebase.client.ValueEventListener;
+import android.support.annotation.NonNull;
 
+import com.google.android.gms.tasks.OnFailureListener;
+import com.google.android.gms.tasks.OnSuccessListener;
+import com.google.firebase.auth.AuthResult;
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.auth.FirebaseUser;
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.DatabaseError;
+import com.google.firebase.database.ValueEventListener;
+
 import java.util.Map;
 
 import edu.galileo.android.androidchat.contactlist.entities.User;
@@ -19,8 +25,8 @@
  */
 public class LoginRepositoryImpl implements LoginRepository {
     private FirebaseHelper helper;
-    private Firebase dataReference;
-    private Firebase myUserReference;
+    private DatabaseReference dataReference;
+    private DatabaseReference myUserReference;
 
     public LoginRepositoryImpl(){
         helper = FirebaseHelper.getInstance();
@@ -30,48 +36,57 @@
 
     @Override
     public void signUp(final String email, final String password) {
-        dataReference.createUser(email, password, new Firebase.ValueResultHandler<Map<String, Object>>() {
+        FirebaseAuth.getInstance().createUserWithEmailAndPassword(email, password)
+                .addOnSuccessListener(new OnSuccessListener<AuthResult>() {
-            @Override
+                    @Override
-            public void onSuccess(Map<String, Object> result) {
+                    public void onSuccess(AuthResult authResult) {
-                postEvent(LoginEvent.onSignUpSuccess);
-                signIn(email, password);
-            }
+                        postEvent(LoginEvent.onSignUpSuccess);
+                        signIn(email, password);
+                    }
-
+                })
+                .addOnFailureListener(new OnFailureListener() {
-            @Override
+                    @Override
-            public void onError(FirebaseError firebaseError) {
-                postEvent(LoginEvent.onSignUpError, firebaseError.getMessage());
+                    public void onFailure(@NonNull Exception e) {
+                        postEvent(LoginEvent.onSignUpError, e.getMessage());
-            }
-        });
+                    }
+                });
     }
 
     @Override
     public void signIn(String email, String password) {
-        dataReference.authWithPassword(email, password, new Firebase.AuthResultHandler() {
+        try {
+            FirebaseAuth auth = FirebaseAuth.getInstance();
+            auth.signInWithEmailAndPassword(email, password)
+                    .addOnSuccessListener(new OnSuccessListener<AuthResult>() {
-            @Override
+                        @Override
-            public void onAuthenticated(AuthData authData) {
+                        public void onSuccess(AuthResult authResult) {
-                myUserReference = helper.getMyUserReference();
-                myUserReference.addListenerForSingleValueEvent(new ValueEventListener() {
-                    @Override
-                    public void onDataChange(DataSnapshot snapshot) {
-                        initSignIn(snapshot);
-                    }
+                            myUserReference = helper.getMyUserReference();
+                            myUserReference.addListenerForSingleValueEvent(new ValueEventListener() {
+                                @Override
+                                public void onDataChange(DataSnapshot snapshot) {
+                                    initSignIn(snapshot);
+                                }
-
-                    @Override
+                                @Override
-                    public void onCancelled(FirebaseError firebaseError) {
+                                public void onCancelled(DatabaseError firebaseError) {
+                                    postEvent(LoginEvent.onSignInError, firebaseError.getMessage());
-                    }
-                });
-            }
+                                }
+                            });
+                        }
-
+                    })
+                    .addOnFailureListener(new OnFailureListener() {
-            @Override
+                        @Override
-            public void onAuthenticationError(FirebaseError firebaseError) {
-                postEvent(LoginEvent.onSignInError, firebaseError.getMessage());
+                        public void onFailure(@NonNull Exception e) {
+                            postEvent(LoginEvent.onSignInError, e.getMessage());
-            }
-        });
+                        }
+                    });
+        } catch (Exception e) {
+            postEvent(LoginEvent.onSignInError, e.getMessage());
-    }
+        }
+    }
 
     @Override
     public void checkAlreadyAuthenticated() {
-        if (dataReference.getAuth() != null) {
+        if (FirebaseAuth.getInstance().getCurrentUser() != null) {
             myUserReference = helper.getMyUserReference();
             myUserReference.addListenerForSingleValueEvent(new ValueEventListener() {
                 @Override
@@ -80,7 +95,7 @@
                 }
 
                 @Override
-                public void onCancelled(FirebaseError firebaseError) {
+                public void onCancelled(DatabaseError firebaseError) {
                     postEvent(LoginEvent.onSignInError, firebaseError.getMessage());
                 }
             });
Index: app/src/main/java/edu/galileo/android/androidchat/contactlist/ContactListRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/edu/galileo/android/androidchat/contactlist/ContactListRepositoryImpl.java	(revision 6d05887547bb2e793e5bc7b6e386f71a1f617ac0)
+++ app/src/main/java/edu/galileo/android/androidchat/contactlist/ContactListRepositoryImpl.java	(revision )
@@ -1,8 +1,8 @@
 package edu.galileo.android.androidchat.contactlist;
 
-import com.firebase.client.ChildEventListener;
-import com.firebase.client.DataSnapshot;
-import com.firebase.client.FirebaseError;
+import com.google.firebase.database.ChildEventListener;
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseError;
 
 import edu.galileo.android.androidchat.contactlist.entities.User;
 import edu.galileo.android.androidchat.contactlist.events.ContactListEvent;
@@ -58,7 +58,7 @@
                 }
 
                 @Override
-                public void onCancelled(FirebaseError firebaseError) {}
+                public void onCancelled(DatabaseError firebaseError) {}
             };
         }
 
Index: app/src/main/java/edu/galileo/android/androidchat/domain/FirebaseHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/edu/galileo/android/androidchat/domain/FirebaseHelper.java	(revision 6d05887547bb2e793e5bc7b6e386f71a1f617ac0)
+++ app/src/main/java/edu/galileo/android/androidchat/domain/FirebaseHelper.java	(revision )
@@ -1,10 +1,12 @@
 package edu.galileo.android.androidchat.domain;
 
-import com.firebase.client.AuthData;
-import com.firebase.client.DataSnapshot;
-import com.firebase.client.Firebase;
-import com.firebase.client.FirebaseError;
-import com.firebase.client.ValueEventListener;
+import com.google.firebase.auth.FirebaseAuth;
+import com.google.firebase.auth.FirebaseUser;
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.DatabaseError;
+import com.google.firebase.database.FirebaseDatabase;
+import com.google.firebase.database.ValueEventListener;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -15,12 +17,11 @@
  * Created by ykro.
  */
 public class FirebaseHelper {
-    private Firebase dataReference;
+    private DatabaseReference dataReference;
     private final static String SEPARATOR = "___";
     private final static String CHATS_PATH = "chats";
     private final static String USERS_PATH = "users";
     public final static String CONTACTS_PATH = "contacts";
-    private final static String FIREBASE_URL = "https://android-chat-example.firebaseio.com";
 
     private static class SingletonHolder {
         private static final FirebaseHelper INSTANCE = new FirebaseHelper();
@@ -31,25 +32,24 @@
     }
 
     public FirebaseHelper(){
-        dataReference = new Firebase(FIREBASE_URL);
+        dataReference = FirebaseDatabase.getInstance().getReference();
     }
 
-    public Firebase getDataReference() {
+    public DatabaseReference getDataReference() {
         return dataReference;
     }
 
     public String getAuthUserEmail() {
-        AuthData authData = dataReference.getAuth();
+        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
         String email = null;
-        if (authData != null) {
-            Map<String, Object> providerData = authData.getProviderData();
-            email = providerData.get("email").toString();
+        if (user != null) {
+            email = user.getEmail();
         }
         return email;
     }
 
-    public Firebase getUserReference(String email){
-        Firebase userReference = null;
+    public DatabaseReference getUserReference(String email){
+        DatabaseReference userReference = null;
         if (email != null) {
             String emailKey = email.replace(".", "_");
             userReference = dataReference.getRoot().child(USERS_PATH).child(emailKey);
@@ -57,24 +57,24 @@
         return userReference;
     }
 
-    public Firebase getMyUserReference() {
+    public DatabaseReference getMyUserReference() {
         return getUserReference(getAuthUserEmail());
     }
 
-    public Firebase getContactsReference(String email){
+    public DatabaseReference getContactsReference(String email){
         return getUserReference(email).child(CONTACTS_PATH);
     }
 
-    public Firebase getMyContactsReference(){
+    public DatabaseReference getMyContactsReference(){
         return getContactsReference(getAuthUserEmail());
     }
 
-    public Firebase getOneContactReference(String mainEmail, String childEmail){
+    public DatabaseReference getOneContactReference(String mainEmail, String childEmail){
         String childKey = childEmail.replace(".","_");
         return getUserReference(mainEmail).child(CONTACTS_PATH).child(childKey);
     }
 
-    public Firebase getChatsReference(String receiver){
+    public DatabaseReference getChatsReference(String receiver){
         String keySender = getAuthUserEmail().replace(".","_");
         String keyReceiver = receiver.replace(".","_");
 
@@ -102,16 +102,16 @@
             public void onDataChange(DataSnapshot snapshot) {
                 for (DataSnapshot child : snapshot.getChildren()) {
                     String email = child.getKey();
-                    Firebase reference = getOneContactReference(email, myEmail);
+                    DatabaseReference reference = getOneContactReference(email, myEmail);
                     reference.setValue(online);
                 }
                 if (signoff){
-                    dataReference.unauth();
+                    FirebaseAuth.getInstance().signOut();
                 }
             }
 
             @Override
-            public void onCancelled(FirebaseError firebaseError) {
+            public void onCancelled(DatabaseError firebaseError) {
             }
         });
     }
Index: app/src/main/java/edu/galileo/android/androidchat/chat/ChatRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/edu/galileo/android/androidchat/chat/ChatRepositoryImpl.java	(revision 6d05887547bb2e793e5bc7b6e386f71a1f617ac0)
+++ app/src/main/java/edu/galileo/android/androidchat/chat/ChatRepositoryImpl.java	(revision )
@@ -1,9 +1,9 @@
 package edu.galileo.android.androidchat.chat;
 
-import com.firebase.client.ChildEventListener;
-import com.firebase.client.DataSnapshot;
-import com.firebase.client.Firebase;
-import com.firebase.client.FirebaseError;
+import com.google.firebase.database.ChildEventListener;
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.DatabaseError;
 
 import edu.galileo.android.androidchat.chat.entities.ChatMessage;
 import edu.galileo.android.androidchat.chat.events.ChatEvent;
@@ -56,7 +56,7 @@
                 public void onChildMoved(DataSnapshot dataSnapshot, String s) {}
 
                 @Override
-                public void onCancelled(FirebaseError firebaseError) {}
+                public void onCancelled(DatabaseError firebaseError) {}
             };
             helper.getChatsReference(receiver).addChildEventListener(chatEventListener);
         }
@@ -78,7 +78,7 @@
     public void sendMessage(String msg) {
         String keySender = helper.getAuthUserEmail().replace(".","_");
         ChatMessage chatMessage = new ChatMessage(keySender, msg);
-        Firebase chatsReference = helper.getChatsReference(receiver);
+        DatabaseReference chatsReference = helper.getChatsReference(receiver);
         chatsReference.push().setValue(chatMessage);
     }
 
Index: app/src/main/java/edu/galileo/android/androidchat/AndroidChatApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/edu/galileo/android/androidchat/AndroidChatApplication.java	(revision 6d05887547bb2e793e5bc7b6e386f71a1f617ac0)
+++ app/src/main/java/edu/galileo/android/androidchat/AndroidChatApplication.java	(revision )
@@ -2,7 +2,7 @@
 
 import android.app.Application;
 
-import com.firebase.client.Firebase;
+import com.google.firebase.database.FirebaseDatabase;
 
 import edu.galileo.android.androidchat.lib.GlideImageLoader;
 import edu.galileo.android.androidchat.lib.ImageLoader;
@@ -29,7 +29,6 @@
     }
 
     private void setupFirebase(){
-        Firebase.setAndroidContext(this);
-        Firebase.getDefaultConfig().setPersistenceEnabled(true);
+        FirebaseDatabase.getInstance().setPersistenceEnabled(true);
     }
 }
Index: app/src/main/java/edu/galileo/android/androidchat/addcontact/AddContactRepositoryImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/edu/galileo/android/androidchat/addcontact/AddContactRepositoryImpl.java	(revision 6d05887547bb2e793e5bc7b6e386f71a1f617ac0)
+++ app/src/main/java/edu/galileo/android/androidchat/addcontact/AddContactRepositoryImpl.java	(revision )
@@ -1,9 +1,9 @@
 package edu.galileo.android.androidchat.addcontact;
 
-import com.firebase.client.DataSnapshot;
-import com.firebase.client.Firebase;
-import com.firebase.client.FirebaseError;
-import com.firebase.client.ValueEventListener;
+import com.google.firebase.database.DataSnapshot;
+import com.google.firebase.database.DatabaseError;
+import com.google.firebase.database.DatabaseReference;
+import com.google.firebase.database.ValueEventListener;
 
 import edu.galileo.android.androidchat.addcontact.events.AddContactEvent;
 import edu.galileo.android.androidchat.contactlist.entities.User;
@@ -20,7 +20,7 @@
         final String key = email.replace(".","_");
 
         FirebaseHelper helper = FirebaseHelper.getInstance();
-        final Firebase userReference = helper.getUserReference(email);
+        final DatabaseReference userReference = helper.getUserReference(email);
         userReference.addListenerForSingleValueEvent(new ValueEventListener() {
             @Override
             public void onDataChange(DataSnapshot snapshot) {
@@ -30,12 +30,12 @@
                     boolean online = user.isOnline();
                     FirebaseHelper helper = FirebaseHelper.getInstance();
 
-                    Firebase userContactsReference = helper.getMyContactsReference();
+                    DatabaseReference userContactsReference = helper.getMyContactsReference();
                     userContactsReference.child(key).setValue(online);
 
                     String currentUserEmailKey = helper.getAuthUserEmail();
                     currentUserEmailKey = currentUserEmailKey.replace(".","_");
-                    Firebase reverseUserContactsReference = helper.getContactsReference(email);
+                    DatabaseReference reverseUserContactsReference = helper.getContactsReference(email);
                     reverseUserContactsReference.child(currentUserEmailKey).setValue(true);
                 } else {
                     event.setError(true);
@@ -45,7 +45,7 @@
             }
 
             @Override
-            public void onCancelled(FirebaseError firebaseError) {}
+            public void onCancelled(DatabaseError firebaseError) {}
         });
     }
 }
Index: app/src/main/java/edu/galileo/android/androidchat/chat/entities/ChatMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/edu/galileo/android/androidchat/chat/entities/ChatMessage.java	(revision 6d05887547bb2e793e5bc7b6e386f71a1f617ac0)
+++ app/src/main/java/edu/galileo/android/androidchat/chat/entities/ChatMessage.java	(revision )
@@ -1,15 +1,15 @@
 package edu.galileo.android.androidchat.chat.entities;
 
-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import com.google.firebase.database.Exclude;
 
 /**
  * Created by ykro.
  */
 
-@JsonIgnoreProperties({"sentByMe"})
 public class ChatMessage {
     String msg;
     String sender;
+    @Exclude
     boolean sentByMe;
 
     public ChatMessage(){}
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision 6d05887547bb2e793e5bc7b6e386f71a1f617ac0)
+++ app/build.gradle	(revision )
@@ -17,12 +17,13 @@
             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
         }
     }
-
+    /*
     packagingOptions {
         exclude 'META-INF/LICENSE'
         exclude 'META-INF/LICENSE-FIREBASE.txt'
         exclude 'META-INF/NOTICE'
     }
+    */
 }
 
 dependencies {
@@ -34,9 +35,12 @@
     compile "com.android.support:design:$rootProject.ext.supportLibraryVersion"
     compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
 
-    compile "com.firebase:firebase-client-android:$rootProject.ext.firebaseClientVersion"
+    compile "com.google.firebase:firebase-database:$rootProject.ext.firebaseVersion"
+    compile "com.google.firebase:firebase-auth:$rootProject.ext.firebaseVersion"
     compile "de.hdodenhof:circleimageview:$rootProject.ext.circleImageViewVersion"
     compile "com.jakewharton:butterknife:$rootProject.ext.butterknifeVersion"
     compile "com.github.bumptech.glide:glide:$rootProject.ext.glideVersion"
     compile "org.greenrobot:eventbus:$rootProject.ext.eventbusVersion"
 }
+
+apply plugin: 'com.google.gms.google-services'
\ No newline at end of file
